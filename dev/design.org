* Sequence diagram

#+begin_src plantuml :file sequence.png
  @startuml

  actor User
  participant Primary
  participant TCPrimaryPlugin
  participant Secondary
  participant TCSecondaryPlugin

  User -> Primary: tradeCopyTCPrimaryPlugin = loadTradeCopyTCPrimaryPlugin()
  TCPrimaryPlugin -> Primary: currTradePosition = getCurrentTradePosition()
  TCPrimaryPlugin -> TCPrimaryPlugin: setCurrentPluginPosition(currTradePosition)
  User -> TCPrimaryPlugin: setPort(port)
  ...
  User -> Secondary: tradeCopyTCSecondaryPlugin = loadTradeCopyTCSecondaryPlugin()
  User -> TCSecondaryPlugin: setPort(port)
  TCSecondaryPlugin -> TCPrimaryPlugin: connect(port)
  TCPrimaryPlugin -> TCSecondaryPlugin: symbols = {"chart_symbol": "...", "trade_symbol": "..."}
  TCSecondaryPlugin -> User: symbols
  User -> TCSecondaryPlugin: confirmSymbols(symbols)
  ...
  loop for each tick
  Primary -> TCPrimaryPlugin: callback()
  TCPrimaryPlugin -> Primary: newPos = getCurrentTradePosition()
  alt newPos != getCurrentPluginPosition()
    TCPrimaryPlugin -> TCPrimaryPlugin: setCurrentPluginPosition(newPos)
    TCPrimaryPlugin --/ TCSecondaryPlugin: updatePosition(newPos)
  end
  end
  ...
  TCSecondaryPlugin -> TCSecondaryPlugin: delta = newPos - currPos
  alt delta > 0
    TCSecondaryPlugin -> Secondary: buy(delta)
  else if delta < 0
    TCSecondaryPlugin -> Secondary: sell(delta)
  end
  @enduml
#+end_src

#+RESULTS:
[[file:sequence.png]]


* Class diagram

#+begin_src plantuml :file class.png
  class SCPlugin {
    double getCurrentTradePosition()
  }

  class TCPrimaryPlugin {
    +int port

    -double pluginCurrentPosition
    -ServerSocket socket
    -vector<Connection> secondaryConnections

  }

  class TCSecondaryPlugin {
    +string host
    +int port
    -ClientSocket socket

    double pluginCurrentPosition
  }

  SCPlugin <|-- TCPrimaryPlugin
  SCPlugin <|-- TCSecondaryPlugin
#+end_src

#+RESULTS:
[[file:class.png]]
